)
ggplot(data = map_data) +
# Representar todos los departamentos con la misma escala de color según Theta
geom_sf(aes(fill = Theta), color = "white", size = 0.2) +
# Escala de colores para Theta
scale_fill_gradient2(low = "#eeaf61", mid = "#ff9818" ,high = "#6a0d83", midpoint = 47.5, name = "MEDIA\nPOSTERIOR") +
# Títulos y estilos
ggtitle(label = "MAPA DE COLOMBIA: MEDIA POSTERIOR POR DEPARTAMENTOS",
subtitle = "PUNTAJES PROMEDIO DE MATEMÁTICAS EN 2023") +
theme_minimal() +
theme(
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 11, face = "bold", hjust = 0.5, color = "grey40"),
axis.text = element_blank(),       # Eliminar texto de los ejes
axis.ticks = element_blank(),      # Eliminar marcas de los ejes
panel.grid = element_blank(),      # Eliminar cuadrícula
)
ggplot(data = map_data) +
# Representar todos los departamentos con la misma escala de color según Theta
geom_sf(aes(fill = Theta), color = "white", size = 0.2) +
# Escala de colores para Theta
scale_fill_gradient2(low = "#eeaf61", mid = "#ff9818" ,high = "#6a0d83", midpoint = 45, name = "MEDIA\nPOSTERIOR") +
# Títulos y estilos
ggtitle(label = "MAPA DE COLOMBIA: MEDIA POSTERIOR POR DEPARTAMENTOS",
subtitle = "PUNTAJES PROMEDIO DE MATEMÁTICAS EN 2023") +
theme_minimal() +
theme(
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 11, face = "bold", hjust = 0.5, color = "grey40"),
axis.text = element_blank(),       # Eliminar texto de los ejes
axis.ticks = element_blank(),      # Eliminar marcas de los ejes
panel.grid = element_blank(),      # Eliminar cuadrícula
)
ggplot(data = map_data) +
geom_sf(aes(fill = ifelse(Destacado == "Destacado", Theta, NA)),
color = "white", size = 0.2, na.rm = TRUE) +
geom_sf(data = filter(map_data, Destacado == "No Destacado"),
fill = "#eeaf61", color = "white", size = 0.2) +
scale_fill_gradient2(low = "#ff9818", mid = "#dc5858" ,high = "#6a0d83", midpoint = 55, name = "MEDIA\nPOSTERIOR") +
ggtitle(label = "MAPA DE COLOMBIA: DEPARTAMENTOS DESTACADOS",
subtitle = "CINCO MEJORES PUNTAJES DE MATEMATICAS EN 2023") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),text = element_text(size = 10),
plot.subtitle = element_text(size = 10, face = "bold", hjust = 0.5, color = "grey40"),
axis.text = element_blank(), axis.ticks = element_blank(), panel.grid = element_blank())
ggplot(data = map_data) +
geom_sf(aes(fill = ifelse(Destacado == "Destacado", Theta, NA)),
color = "white", size = 0.2, na.rm = TRUE) +
geom_sf(data = filter(map_data, Destacado == "No Destacado"),
fill = "#eeaf61", color = "white", size = 0.2) +
scale_fill_gradient2(low = "#ff9818", mid = "#dc5858" ,high = "#6a0d83", midpoint = 54.5, name = "MEDIA\nPOSTERIOR") +
ggtitle(label = "MAPA DE COLOMBIA: DEPARTAMENTOS DESTACADOS",
subtitle = "CINCO MEJORES PUNTAJES DE MATEMATICAS EN 2023") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),text = element_text(size = 10),
plot.subtitle = element_text(size = 10, face = "bold", hjust = 0.5, color = "grey40"),
axis.text = element_blank(), axis.ticks = element_blank(), panel.grid = element_blank())
df_resultados
resultados_departamentos
# Mostrar los resultados
mejores_departamentos
# Extraer los 5 mejores departamentos
mejores <- c("68", "11", "41", "15", "25")  # Reemplaza con tus departamentos destacados
lista_resultados <- resultados_departamentos[mejores]
# Crear un data frame con la información de Theta
tabla_theta <- do.call(rbind, lapply(names(lista_resultados), function(depto) {
data.frame(
Departamento = depto,
Theta = lista_resultados[[depto]]$tabla$Estimación[1]  # Extraer solo Theta
)
}))
# Ajustar nombres
rownames(tabla_theta) <- NULL
tabla_theta$Departamento <- factor(tabla_theta$Departamento)
# Extraer los 5 mejores departamentos
mejores <- c("68", "11", "41", "15", "25")  # Departamentos destacados
lista_resultados <- resultados_departamentos[mejores]
# Crear un data frame con la información de Theta
tabla_theta <- do.call(rbind, lapply(names(lista_resultados), function(depto) {
# Verificar si 'tabla' existe y extraer la primera fila (Theta)
if (!is.null(lista_resultados[[depto]]$tabla)) {
theta_valor <- lista_resultados[[depto]]$tabla[1, "Estimación"]
} else {
theta_valor <- NA  # Manejar casos donde no haya datos
}
# Crear la fila para la tabla final
data.frame(
Departamento = depto,
Theta = theta_valor
)
}))
# Extraer los 5 mejores departamentos
mejores <- c("68", "11", "41", "15", "25")  # Departamentos destacados
lista_resultados <- resultados_departamentos[mejores]
# Crear un data frame con la información de Theta
tabla_theta <- do.call(rbind, lapply(names(lista_resultados), function(depto) {
# Verificar si 'tabla' existe y extraer la primera fila (Theta)
if (!is.null(lista_resultados[[depto]]$tabla)) {
theta_valor <- lista_resultados[[depto]]$tabla[1, "Estimación"]
} else {
theta_valor <- NA  # Manejar casos donde no haya datos
}
# Crear la fila para la tabla final
data.frame(
Departamento = depto,
Theta = theta_valor
)
}))
lista_resultados
# Extraer los 5 mejores departamentos
mejores <- c("68", "11", "41", "15", "25")  # Departamentos destacados
lista_resultados <- resultados_departamentos[mejores]
lista_resultados
# Crear un data frame con la información de Theta
tabla_theta <- do.call(rbind, lapply(names(lista_resultados), function(depto) {
# Verificar si 'tabla' existe y extraer la primera fila (Theta)
if (!is.null(lista_resultados[[depto]]$tabla)) {
theta_valor <- lista_resultados[[depto]]$tabla[1, "Estimación"]
} else {
theta_valor <- NA  # Manejar casos donde no haya datos
}
# Crear la fila para la tabla final
data.frame(
Departamento = depto,
Theta = theta_valor
)
}))
# Extraer los 5 mejores departamentos
mejores <- c("68", "11", "41", "15", "25")  # Departamentos destacados
lista_resultados <- resultados_departamentos[mejores]
# Crear un data frame con la información de Theta
tabla_theta <- do.call(rbind, lapply(names(lista_resultados), function(depto) {
# Extraer Theta del elemento de la lista correspondiente
theta_valor <- lista_resultados[[depto]]$theta  # Acceso directo a theta
# Crear una fila para la tabla final
data.frame(
Departamento = depto,
Theta = theta_valor
)
}))
# Ajustar nombres
rownames(tabla_theta) <- NULL
tabla_theta$Departamento <- factor(tabla_theta$Departamento)
# Mostrar la tabla
print(tabla_theta)
# Extraer los 5 mejores departamentos
mejores <- c("68", "11", "41", "15", "25")  # Departamentos destacados
lista_resultados <- resultados_departamentos[mejores]
# Crear un data frame con Theta, CV, L. Inf. y L. Sup.
tabla_comparativa <- do.call(rbind, lapply(names(lista_resultados), function(depto) {
# Extraer la tabla asociada al departamento
tabla <- lista_resultados[[depto]]$tabla
# Extraer los valores de interés desde las filas y columnas correctas
data.frame(
Departamento = depto,
Theta = tabla[tabla[, 1] == "Theta", "Estimación"],     # Estimación de Theta
CV = tabla[tabla[, 1] == "Theta", "CV"],                # Coeficiente de Variación
L_Inf = tabla[tabla[, 1] == "Theta", "L. Inf."],        # Límite inferior
L_Sup = tabla[tabla[, 1] == "Theta", "L. Sup."]         # Límite superior
)
}))
# Ajustar nombres
rownames(tabla_comparativa) <- NULL
tabla_comparativa$Departamento <- factor(tabla_comparativa$Departamento)
# Mostrar la tabla
print(tabla_comparativa)
shp = sf::st_read("MGN2023_DPTO_POLITICO/MGN_ADM_DPTO_POLITICO.shp", quiet = T)
# Extraer los 5 mejores departamentos
mejores <- c("68", "11", "41", "15", "25")  # Departamentos destacados
lista_resultados <- resultados_departamentos[mejores]
# Crear un data frame con la información de Theta, CV y límites
tabla_completa <- do.call(rbind, lapply(names(lista_resultados), function(depto) {
# Verificar que la tabla existe
if (!is.null(lista_resultados[[depto]]$tabla)) {
# Extraer valores de la tabla
tabla <- lista_resultados[[depto]]$tabla
# Extraer los valores de interés
theta_valor <- tabla[tabla$`Estimada` == "Theta", "Estimación"]
cv_valor <- tabla[tabla$`Estimada` == "Desviación", "Estimación"]
lim_inf <- tabla[tabla$`Estimada` == "Theta", "L. Inf."]
lim_sup <- tabla[tabla$`Estimada` == "Theta", "L. Sup."]
} else {
theta_valor <- NA
cv_valor <- NA
lim_inf <- NA
lim_sup <- NA
}
# Crear una fila para la tabla final
data.frame(
Departamento = depto,
Theta = theta_valor,
CV = cv_valor,
L_Inf = lim_inf,
L_Sup = lim_sup
)
}))
# Mostrar los resultados
mejores_departamentos
# Extraer los 5 mejores departamentos
mejores <- c("68", "11", "41", "15", "25")  # Departamentos destacados
lista_resultados <- resultados_departamentos[mejores]
lista_resultados
tablas_resultados <- lapply(lista_resultados, function(x) x$tabla)
tablas_resultados
thetas <- lapply(tablas_resultados, function(x) x[x$parametro == "theta", ])
thetas
tablas_resultados
theta_values <- sapply(tablas_resultados, function(tab) {
theta <- tab$Estimacion[tab$Parametros == "Theta"]
return(theta)
})
str(tablas_resultados)
library(kableExtra)
# Función para extraer el valor de Theta de cada tabla
theta_values <- sapply(tablas_resultados, function(kable_obj) {
# Convertir el knitr_kable a una tabla regular (data.frame)
tab <- kable_as_table(kable_obj)
# Extraer el valor de Theta de la tabla
theta <- as.numeric(tab[tab$V1 == "Theta", "V2"])  # Asumiendo que los valores están en la columna V2
return(theta)
})
# Mostrar los valores de Theta
print(theta_values)
# Función para extraer el valor de Theta de cada tabla
theta_values <- sapply(tablas_resultados, function(kable_obj) {
# Convertir el knitr_kable a una tabla regular (data.frame)
tab <- kable_as_table(kable_obj)
# Extraer el valor de Theta de la tabla
theta <- as.numeric(tab[tab$V1 == "Theta", "V2"])  # Asumiendo que los valores están en la columna V2
return(theta)
})
kableExtra
library(kableExtra)
# Función para extraer el valor de Theta de cada tabla
theta_values <- sapply(tablas_resultados, function(kable_obj) {
# Convertir el knitr_kable a una tabla regular (data.frame)
tab <- kable_as_table(kable_obj)
# Extraer el valor de Theta de la tabla
theta <- as.numeric(tab[tab$V1 == "Theta", "V2"])  # Asumiendo que los valores están en la columna V2
return(theta)
})
# Función para convertir el kable en una tabla y extraer el valor de Theta
theta_values <- sapply(tablas_resultados, function(kable_obj) {
# Obtener el texto de la tabla
table_text <- paste(kable_obj, collapse = "\n")
# Limpiar el formato y leerlo como una tabla
table_lines <- textConnection(table_text)
tab <- read.table(table_lines, header = TRUE, sep = "|", skip = 2, stringsAsFactors = FALSE)
# Limpiar los espacios adicionales en los nombres de las columnas
colnames(tab) <- gsub("^\\s+|\\s+$", "", colnames(tab))
# Extraer el valor de "Theta"
theta <- as.numeric(tab$Estimación[tab$`` == "Theta"])  # Asumimos que la columna vacía es el parámetro
# Cargar la librería necesaria
library(knitr)
# Función para extraer el valor de Theta de las tablas en formato kable
theta_values <- sapply(tablas_resultados, function(kable_obj) {
# Obtener el texto de la tabla
table_text <- paste(kable_obj, collapse = "\n")
# Convertir la tabla de texto en un formato más legible
table_lines <- strsplit(table_text, "\n")[[1]]
# Limpiar las líneas que contienen la cabecera y el borde de la tabla
cleaned_lines <- table_lines[grepl("^\\|", table_lines)]
# Dividir las líneas por el separador '|' y extraer los valores
table_data <- do.call(rbind, strsplit(cleaned_lines, "\\|"))
# Eliminar los espacios extras de los elementos de la tabla
table_data <- apply(table_data, 2, function(x) gsub("^\\s+|\\s+$", "", x))
# Convertir la tabla a un data.frame
df <- data.frame(Parametros = table_data[, 1], Estimación = as.numeric(table_data[, 2]),
CV = as.numeric(table_data[, 3]), L_Inf = as.numeric(table_data[, 4]),
L_Sup = as.numeric(table_data[, 5]), stringsAsFactors = FALSE)
# Extraer el valor de "Theta"
theta <- df$Estimación[df$Parametros == "Theta"]
return(theta)
})
# Mostrar los resultados
print(theta_values)
tablas_resultados
for (depto in mejores) {
resultado <- bayesian_analysis(dat,
depto_res_col = "ESTU_COD_RESIDE_DEPTO",
depto_code = depto,
score_col = "PUNT_MATEMATICAS")
# Extraer la estimación de theta y guardar en una lista
resultados_departamentos[[as.character(depto)]] <- list(
depto_code = depto,
tabla = resultado$resultados$theta
)
}
unique(cbind(dat$ESTU_COD_RESIDE_DEPTO,dat$ESTU_DEPTO_RESIDE))
# Lista de códigos de departamentos únicos en los datos
departamentos <- unique(dat$ESTU_COD_RESIDE_DEPTO)
# Eliminar el codigo 88
departamentos <- departamentos[departamentos != 88]
# Inicializar una lista para guardar resultados
resultados_departamentos <- list()
# Iterar sobre cada departamento
for (depto in departamentos) {
resultado <- bayesian_analysis(dat,
depto_res_col = "ESTU_COD_RESIDE_DEPTO",
depto_code = depto,
score_col = "PUNT_MATEMATICAS")
# Extraer la estimación de theta y guardar en una lista
resultados_departamentos[[as.character(depto)]] <- list(
depto_code = depto,
theta = resultado$parametros_posteriores$mun,  # Media posterior de theta
tabla = resultado$resultados
)
}
# Convertir los resultados en un data frame
df_resultados <- do.call(rbind, lapply(resultados_departamentos, function(x) {
data.frame(Departamento = x$depto_code, Theta = x$theta)
}))
unique(df_resultados$Departamento)
df_resultados$Departamento <- ifelse(nchar(df_resultados$Departamento) == 1, paste0("0", df_resultados$Departamento), df_resultados$Departamento)
# Ordenar por la estimación de Theta en orden descendente
df_ordenado <- df_resultados[order(-df_resultados$Theta), ]
# Seleccionar los 5 mejores departamentos
mejores_departamentos <- head(df_ordenado, 5)
# Mostrar los resultados
mejores_departamentos
# Extraer los 5 mejores departamentos
mejores <- c("68", "11", "41", "15", "25")  # Departamentos destacados
mejores1 <- list()
for (depto in mejores) {
resultado <- bayesian_analysis(dat,
depto_res_col = "ESTU_COD_RESIDE_DEPTO",
depto_code = depto,
score_col = "PUNT_MATEMATICAS")
# Extraer la estimación de theta y guardar en una lista
mejores1[[as.character(depto)]] <- list(
depto_code = depto,
tabla = resultado$resultados$theta
)
}
for (depto in mejores) {
resultado <- bayesian_analysis(dat,
depto_res_col = "ESTU_COD_RESIDE_DEPTO",
depto_code = depto,
score_col = "PUNT_MATEMATICAS")
# Extraer la estimación de theta y guardar en una lista
mejores1[[as.character(depto)]] <- list(
depto_code = depto,
tabla = resultado$resultados
)
}
mejores1
# Extraer los 5 mejores departamentos
mejores <- c("68", "11", "41", "15", "25")  # Departamentos destacados
lista_resultados <- resultados_departamentos[mejores]
tablas_resultados <- lapply(lista_resultados, function(x) x$tabla)
tablas_resultados
str(tablas_resultados)
names(tablas_resultados) <- c("Santander", "Bogotá", "Huila", "Boyaca", "Cundinamarca")
tablas_resultados
unique(cbind(dat$ESTU_COD_RESIDE_DEPTO,dat$ESTU_DEPTO_RESIDE))
# Lista de códigos de departamentos únicos en los datos
departamentos <- unique(dat$ESTU_COD_RESIDE_DEPTO)
# Eliminar el codigo 88
departamentos <- departamentos[departamentos != 88]
# Inicializar una lista para guardar resultados
resultados_departamentos <- list()
# Iterar sobre cada departamento
for (depto in departamentos) {
resultado <- bayesian_analysis(dat,
depto_res_col = "ESTU_COD_RESIDE_DEPTO",
depto_code = depto,
score_col = "PUNT_MATEMATICAS")
# Extraer la estimación de theta y guardar en una lista
resultados_departamentos[[as.character(depto)]] <- list(
depto_code = depto,
theta = resultado$parametros_posteriores$mun,  # Media posterior de theta
tabla = resultado$resultados
)
}
# Convertir los resultados en un data frame
df_resultados <- do.call(rbind, lapply(resultados_departamentos, function(x) {
data.frame(Departamento = x$depto_code, Theta = x$theta)
}))
unique(df_resultados$Departamento)
df_resultados$Departamento <- ifelse(nchar(df_resultados$Departamento) == 1, paste0("0", df_resultados$Departamento), df_resultados$Departamento)
# Ordenar por la estimación de Theta en orden descendente
df_ordenado <- df_resultados[order(-df_resultados$Theta), ]
# Seleccionar los 5 mejores departamentos
mejores_departamentos <- head(df_ordenado, 5)
# Mostrar los resultados
mejores_departamentos
# Extraer los 5 mejores departamentos
mejores <- c("68", "11", "41", "15", "25")  # Departamentos destacados
lista_resultados <- resultados_departamentos[mejores]
tablas_resultados <- lapply(lista_resultados, function(x) x$tabla)
names(tablas_resultados) <- c("Santander", "Bogotá", "Huila", "Boyaca", "Cundinamarca")
shp = sf::st_read("MGN2023_DPTO_POLITICO/MGN_ADM_DPTO_POLITICO.shp", quiet = T)
print(shp)
# Eliminar el departamento 88
shp <- shp[shp$dpto_ccdgo != "88", ]
unique(cbind(shp$dpto_ccdgo, shp$dpto_cnmbr))
# Crear una columna que identifique si el departamento está entre los mejores
df_resultados$Destacado <- ifelse(df_resultados$Departamento %in% mejores_departamentos$Departamento, "Destacado", "No Destacado")
df_resultados <- df_resultados[order(df_resultados$Departamento), ]
# Asegurarte de que los códigos son compatibles
df_resultados$Departamento <- as.character(df_resultados$Departamento)
shp$CODIGO_DEPTO <- as.character(shp$dpto_ccdgo)  # Cambia el nombre según tu shapefile
library(dplyr)
# Hacer el join
map_data <- shp %>%
left_join(df_resultados, by = c("dpto_ccdgo" = "Departamento"))
# Los NA de Theta se reemplazan por 0 para evitar problemas al graficar
map_data$Theta <- ifelse(is.na(map_data$Theta), 0, map_data$Theta)
map_data <- map_data %>%
filter(!is.na(Theta))  # Filtrar departamentos con valores de Theta
library(ggplot2)
ggplot(data = map_data) +
geom_sf(aes(fill = ifelse(Destacado == "Destacado", Theta, NA)),
color = "white", size = 0.2, na.rm = TRUE) +
geom_sf(data = filter(map_data, Destacado == "No Destacado"),
fill = "#eeaf61", color = "white", size = 0.2) +
scale_fill_gradient2(low = "#ff9818", mid = "#dc5858" ,high = "#6a0d83", midpoint = 54.5, name = "MEDIA\nPOSTERIOR") +
ggtitle(label = "MAPA DE COLOMBIA: DEPARTAMENTOS DESTACADOS",
subtitle = "CINCO MEJORES PUNTAJES DE MATEMATICAS EN 2023") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),text = element_text(size = 10),
plot.subtitle = element_text(size = 10, face = "bold", hjust = 0.5, color = "grey40"),
axis.text = element_blank(), axis.ticks = element_blank(), panel.grid = element_blank())
ggplot(data = map_data) +
# Representar todos los departamentos con la misma escala de color según Theta
geom_sf(aes(fill = Theta), color = "white", size = 0.2) +
# Escala de colores para Theta
scale_fill_gradient2(low = "#eeaf61", mid = "#ff9818" ,high = "#6a0d83", midpoint = 45, name = "MEDIA\nPOSTERIOR") +
# Títulos y estilos
ggtitle(label = "MAPA DE COLOMBIA: MEDIA POSTERIOR POR DEPARTAMENTOS",
subtitle = "PUNTAJES PROMEDIO DE MATEMÁTICAS EN 2023") +
theme_minimal() +
theme(
plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 11, face = "bold", hjust = 0.5, color = "grey40"),
axis.text = element_blank(),       # Eliminar texto de los ejes
axis.ticks = element_blank(),      # Eliminar marcas de los ejes
panel.grid = element_blank(),      # Eliminar cuadrícula
)
mejores_departamentos
source("~/.active-rstudio-document")
peores_departamentos <- tail(df_ordenado, 5)
peores_departamentos <- tail(df_ordenado, 5)
peores_departamentos
peores_departamentos
unique(cbind(shp$dpto_ccdgo, shp$dpto_cnmbr))
peores_departamentos <- tail(df_ordenado, 5)
peores_departamentos
# Extraer los 5 mejores departamentos
peores <- c("47", "44", "91", "27", "99")  # Departamentos destacados
lista_resultados <- resultados_departamentos[peores]
# Extraer las tablas de resultados
tablas_resultados <- lapply(lista_resultados, function(x) x$tabla)
names(tablas_resultados) <- c("Magdalena", "La Guajira", "Amazonas", "Choco", "Vichada")
# Extraer los 5 mejores departamentos
peores <- c("47", "44", "91", "27", "99")  # Departamentos destacados
lista_resultados <- resultados_departamentos[peores]
# Extraer las tablas de resultados
tablas_resultados <- lapply(lista_resultados, function(x) x$tabla)
names(tablas_resultados) <- c("Magdalena", "La Guajira", "Amazonas", "Choco", "Vichada")
tablas_resultados
# Crear una columna que identifique si el departamento está entre los mejores
df_resultados$Destacado <- ifelse(df_resultados$Departamento %in% peores_departamentos$Departamento, "No Destacado", "Destacado")
# Ordenar los departamentos por el codigo
df_resultados <- df_resultados[order(df_resultados$Departamento), ]
# Asegurarte de que los códigos son compatibles
df_resultados$Departamento <- as.character(df_resultados$Departamento)
shp$CODIGO_DEPTO <- as.character(shp$dpto_ccdgo)  # Cambia el nombre según tu shapefile
library(dplyr)
# Hacer el join
map_data <- shp %>%
left_join(df_resultados, by = c("dpto_ccdgo" = "Departamento"))
# Los NA de Theta se reemplazan por 0 para evitar problemas al graficar
map_data$Theta <- ifelse(is.na(map_data$Theta), 0, map_data$Theta)
map_data <- map_data %>%
filter(!is.na(Theta))  # Filtrar departamentos con valores de Theta
ggplot(data = map_data) +
geom_sf(aes(fill = ifelse(Destacado == "Destacado", Theta, NA)),
color = "white", size = 0.2, na.rm = TRUE) +
geom_sf(data = filter(map_data, Destacado == "No Destacado"),
fill = "#eeaf61", color = "white", size = 0.2) +
scale_fill_gradient2(low = "#ff9818", mid = "#dc5858" ,high = "#6a0d83", midpoint = 54.5, name = "MEDIA\nPOSTERIOR") +
ggtitle(label = "MAPA DE COLOMBIA: DEPARTAMENTOS DESTACADOS",
subtitle = "CINCO PEORES PUNTAJES DE MATEMATICAS EN 2023") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),text = element_text(size = 10),
plot.subtitle = element_text(size = 10, face = "bold", hjust = 0.5, color = "grey40"),
axis.text = element_blank(), axis.ticks = element_blank(), panel.grid = element_blank())
ggplot(data = map_data) +
geom_sf(aes(fill = ifelse(Destacado == "No Destacado", Theta, NA)),
color = "white", size = 0.2, na.rm = TRUE) +
geom_sf(data = filter(map_data, Destacado == "Destacado"),
fill = "#eeaf61", color = "white", size = 0.2) +
scale_fill_gradient2(low = "#ff9818", mid = "#dc5858" ,high = "#6a0d83", midpoint = 54.5, name = "MEDIA\nPOSTERIOR") +
ggtitle(label = "MAPA DE COLOMBIA: DEPARTAMENTOS DESTACADOS",
subtitle = "CINCO PEORES PUNTAJES DE MATEMATICAS EN 2023") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),text = element_text(size = 10),
plot.subtitle = element_text(size = 10, face = "bold", hjust = 0.5, color = "grey40"),
axis.text = element_blank(), axis.ticks = element_blank(), panel.grid = element_blank())
ggplot(data = map_data) +
geom_sf(aes(fill = ifelse(Destacado == "No Destacado", Theta, NA)),
color = "white", size = 0.2, na.rm = TRUE) +
geom_sf(data = filter(map_data, Destacado == "Destacado"),
fill = "#eeaf61", color = "white", size = 0.2) +
scale_fill_gradient2(low = "#ff9818", mid = "#dc5858" ,high = "#6a0d83", midpoint = 42, name = "MEDIA\nPOSTERIOR") +
ggtitle(label = "MAPA DE COLOMBIA: DEPARTAMENTOS DESTACADOS",
subtitle = "CINCO PEORES PUNTAJES DE MATEMATICAS EN 2023") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),text = element_text(size = 10),
plot.subtitle = element_text(size = 10, face = "bold", hjust = 0.5, color = "grey40"),
axis.text = element_blank(), axis.ticks = element_blank(), panel.grid = element_blank())
