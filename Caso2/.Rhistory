vertex.label.font = 2, edge.arrow.mode = T, ylim = c(1.5, -1.5))
title("Modelo 2", line=-0.2, cex.main = 1.2)
mtext("b) Modelo t con medias y\nvarianzas específicas por departamento",
side = 1, line = 0.7, at = 0.1, cex = 0.8)
plot(Modelo3, layout = layout.reingold.tilford, vertex.label.cex = 1,
vertex.label.font = 2, edge.arrow.mode = T, ylim = c(1.5, -1.5))
title("Modelo 3",line=-0.2, cex.main = 1.2)
mtext("c) Modelo t con medias\nespecíficas por municipio y departamento",
side = 1, line = 0.7, at = 0.1, cex = 0.8)
plot(Modelo4, layout = layout.reingold.tilford, vertex.label.cex = 1,
vertex.label.font = 2, edge.arrow.mode = T, ylim = c(1.5, -1.5))
title("Modelo 4", line=-0.2, cex.main = 1.2)
mtext("d) Modelo t con medias y varianzas\nespecíficas por municipio y departamento",
side = 1, line = 0.7, at = 0.1, cex = 0.8)
par(cex.main = 1.2)
title(main = "DAG PARA LOS MODELOS BAYESIANOS PROPUESTOS", outer = TRUE,
line = -0.5, font.main = 2)
dev.off()
logVerosimilitud
tabla = data.table(Modelo = c('Modelo 1', 'Modelo 2', 'Modelo 3', 'Modelo 4'),
Media = colMeans(logVerosimilitud))
library(data.table)
library(parallel)
library(metRology)
tabla = data.table(Modelo = c('Modelo 1', 'Modelo 2', 'Modelo 3', 'Modelo 4'),
Media = colMeans(logVerosimilitud))
xtable::xtable(tabla, digits = 5)
# ====> ESTADISTICA BASEYIANA: CASO DE ESTUDIO #2
setwd("~/REPOS GIT/Estadistica_Bayesiana/Caso2")
# Cargar librerias
library(data.table)                            # Manejo de archivos grandes de datos más eficiente
library(metRology)                             # Distribución t escalada
library(progress)                              # Barras de progreso
library(cluster)                               # K-means
library(factoextra)                            # Visualización de K-means
library(sf)                                    # Manipulación de datos geoespaciales
library(dplyr)                                 # Manipulación de datos
# =====> PUNTO 12: Usando M4, hacer una segmentación de los departamentos usando las medias especificas
#               de los departamentos. por medio del método de agrupamientod de K-medias
#               (Usar un método apropiado para seleccionar el número de grupos).
#               Presentar los resultados obtenidos visualmente a través de una matriz de incidencia
#               organizada a partir del rankin Bayesiano obtenido en el punto 11.
#               y de un mapa que señale los departamentos que pertenecen a cada grupo.
#
# Lectura y filtrado de datos
data <- fread('Data/Saber 11 2022-2.TXT', sep = ';')
data <- data[ESTU_NACIONALIDAD == 'COLOMBIA' &
ESTU_PAIS_RESIDE == 'COLOMBIA' &
ESTU_ESTADOINVESTIGACION == 'PUBLICAR' &
COLE_DEPTO_UBICACION != 'SAN ANDRES' &
!is.na(COLE_MCPIO_UBICACION) &
!is.na(COLE_DEPTO_UBICACION) &
!is.na(PUNT_GLOBAL) &
!is.na(COLE_COD_DEPTO_UBICACION)]
# Ordenar y agrupar
setorder(data, COLE_COD_MCPIO_UBICACION)
data[, group := .GRP, by = COLE_COD_DEPTO_UBICACION]
data[, groupM := .GRP, by = COLE_COD_MCPIO_UBICACION]
# CANTIDAD DE ESTUDIANTES:
nk <- data[, .N, by = group]$N                      # Por departamento
njk <- data[, .N, by = groupM]$N                    # Por municipio
N = nrow(data)                                      # Totales
r <- length(unique(data$COLE_COD_DEPTO_UBICACION))  # Número de departamentos
rn <- (unique(data$COLE_DEPTO_UBICACION))      # Nombre de departamentos
n = length(unique(data$COLE_COD_MCPIO_UBICACION))   # Número de municipios
group = data$group                                  # Grupos por municipios
groupM = data$groupM                                # Grupos por departamentos
groupMxD = c()                                      # Grupos de municipios por departamento
MxD = c()                                           # Municipios por departamento
for (i in unique(group)){
groupMxD = c(groupMxD,rep(i,length(unique(groupM[group == i]))))
MxD = c(MxD, length(unique(groupM[group == i])))
}
y = data$PUNT_GLOBAL
M4 = fread('Data/GibbsModelo4.txt') # Importe de Resultados del modelo 4
RankBay <- matrix(NA, ncol = 3, nrow = length(Col))
colnames(RankBay) <- c("INF", "MEDIAS", "SUP")
rownames(RankBay) = rn
# Llenado de las medias y cuantiles
RankBay[, "MEDIAS"] <- sapply(M4[, ..Col], mean)
RankBay[, c("INF", "SUP")] <- t(sapply(M4[, ..Col], quantile, probs = c(0.025, 0.975)))
# Ordenar la matriz
RankBay = RankBay[order(RankBay[,2], decreasing = FALSE),]
# =====> PUNTO 12: Usando M4, hacer una segmentación de los departamentos usando las medias especificas
#               de los departamentos. por medio del método de agrupamientod de K-medias
# Seleccionar el número de grupos
set.seed(123)
data_matrix <- as.matrix(RankBay_df[, 2])
fviz_nbclust(data_matrix, kmeans, method = "wss")  +
labs(title = "METODO DEL CODO PARA LA SELECCIÓN DEL NUMERO DE GRUPOS EN EL KMEANS",
subtitle = "DEPARTAMENTOS EN COLOMBIA AGRUPADOS POR LA MEDIA DEL MODELO M4") +
theme_minimal() +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 9, face = "bold", hjust = 0.5, color = "grey50"),
text = element_text(size = 10),
legend.position = "right")
# fviz_nbclust(data_matrix, kmeans, method = "silhouette")  +
#   labs(title = "METODO DE SILUETA PARA LA SELECCIÓN DEL NUMERO DE GRUPOS EN EL KMEANS",
#        subtitle = "DEPARTAMENTOS EN COLOMBIA AGRUPADOS POR LA MEDIA DEL MODELO M4") +
#   theme_minimal() +
#   theme(plot.title = element_text(size = 11, face = "bold", hjust = 0.5),
#         plot.subtitle = element_text(size = 9, face = "bold", hjust = 0.5, color = "grey50"),
#         text = element_text(size = 10),
#         legend.position = "right")
# =====> A pesar que el método del codo sugiere de manera más clara 3 o 4 grupos,
#        se procede a realizar el análisis con 5 grupos dado que el grafico muestra un aporte
#        de la inercia en el quinto grupo
# Inicializar la matriz de clusters
Cls <- matrix(NA, nrow = nrow(M4), ncol = r)
colnames(Cls) <- rn
# Inicializar la matriz de incidencia
MInci <- matrix(0, nrow = r, ncol = r)
# Iterar sobre cada fila de M4
for (i in 1:nrow(M4)) {
# Aplicar k-means a las medias específicas de los departamentos
km <- kmeans(as.numeric(M4[i, ..Col]), centers = 5, nstart = 25)
Cls[i, ] <- km$cluster
# Calcular la matriz de incidencia para esta iteración
for (j in 1:5) {
b <- (Cls[i, ] == j)  # Vector lógico para el grupo j en la iteración i
MInci <- MInci + (b %*% t(b))  # Sumar la matriz de incidencia
}
}
#MInci <- MInci / nrow(M4)
rownames(MInci) <- rn
MInci
MInci <- MInci / nrow(M4)
MInci
corrplot::corrplot(corr = MInci,
is.corr = FALSE,
addgrid.col = NA,
method = "color",
tl.pos = "lt",
tl.cex = 0.8,
tl.col = 'black')
par(mfrow = c(1, 1))
corrplot::corrplot(corr = MInci,
is.corr = FALSE,
addgrid.col = NA,
method = "color",
tl.pos = "lt",
tl.cex = 0.8,
tl.col = 'black')
names(IPM) <- c("dpto_nombre", "dpto_ccdgo", "IPM")
data <- fread('Data/Saber 11 2022-2.TXT', sep = ';')
data <- data[ESTU_NACIONALIDAD == 'COLOMBIA' &
ESTU_PAIS_RESIDE == 'COLOMBIA' &
ESTU_ESTADOINVESTIGACION == 'PUBLICAR' &
COLE_DEPTO_UBICACION != 'SAN ANDRES' &
!is.na(COLE_MCPIO_UBICACION) &
!is.na(COLE_DEPTO_UBICACION) &
!is.na(PUNT_GLOBAL) &
!is.na(COLE_COD_DEPTO_UBICACION)]
# Ordenar y agrupar
setorder(data, COLE_COD_MCPIO_UBICACION)
data[, group := .GRP, by = COLE_COD_DEPTO_UBICACION]
data[, groupM := .GRP, by = COLE_COD_MCPIO_UBICACION]
# CANTIDAD DE ESTUDIANTES:
nk <- data[, .N, by = group]$N                      # Por departamento
njk <- data[, .N, by = groupM]$N                    # Por municipio
N = nrow(data)                                      # Totales
r <- length(unique(data$COLE_COD_DEPTO_UBICACION))  # Número de departamentos
rn <- (unique(data$COLE_DEPTO_UBICACION))      # Nombre de departamentos
n = length(unique(data$COLE_COD_MCPIO_UBICACION))   # Número de municipios
group = data$group                                  # Grupos por municipios
groupM = data$groupM                                # Grupos por departamentos
groupMxD = c()                                      # Grupos de municipios por departamento
MxD = c()                                           # Municipios por departamento
for (i in unique(group)){
groupMxD = c(groupMxD,rep(i,length(unique(groupM[group == i]))))
MxD = c(MxD, length(unique(groupM[group == i])))
}
y = data$PUNT_GLOBAL
M4 = fread('Data/GibbsModelo4.txt') # Importe de Resultados del modelo 4
IPM <- read_excel("Data/IPM.xlsx", col_types = c("text", "text", "numeric"))
library(readxl)
IPM <- read_excel("Data/IPM.xlsx", col_types = c("text", "text", "numeric"))
IPM
View(IPM)
Thetas <-  M4[, ..Col]
Thetas
data <- fread('Data/Saber 11 2022-2.TXT', sep = ';')
data <- data[ESTU_NACIONALIDAD == 'COLOMBIA' &
ESTU_PAIS_RESIDE == 'COLOMBIA' &
ESTU_ESTADOINVESTIGACION == 'PUBLICAR' &
COLE_DEPTO_UBICACION != 'SAN ANDRES' &
!is.na(COLE_MCPIO_UBICACION) &
!is.na(COLE_DEPTO_UBICACION) &
!is.na(PUNT_GLOBAL) &
!is.na(COLE_COD_DEPTO_UBICACION)]
# Ordenar y agrupar
setorder(data, COLE_COD_MCPIO_UBICACION)
data[, group := .GRP, by = COLE_COD_DEPTO_UBICACION]
data[, groupM := .GRP, by = COLE_COD_MCPIO_UBICACION]
# CANTIDAD DE ESTUDIANTES:
nk <- data[, .N, by = group]$N                      # Por departamento
njk <- data[, .N, by = groupM]$N                    # Por municipio
N = nrow(data)                                      # Totales
r <- length(unique(data$COLE_COD_DEPTO_UBICACION))  # Número de departamentos
rn <- (unique(data$COLE_DEPTO_UBICACION))      # Nombre de departamentos
n = length(unique(data$COLE_COD_MCPIO_UBICACION))   # Número de municipios
group = data$group                                  # Grupos por municipios
groupM = data$groupM                                # Grupos por departamentos
groupMxD = c()                                      # Grupos de municipios por departamento
MxD = c()                                           # Municipios por departamento
for (i in unique(group)){
groupMxD = c(groupMxD,rep(i,length(unique(groupM[group == i]))))
MxD = c(MxD, length(unique(groupM[group == i])))
}
y = data$PUNT_GLOBAL
M4 = fread('Data/GibbsModelo4.txt') # Importe de Resultados del modelo 4
IPM <- read_excel("Data/IPM.xlsx", col_types = c("text", "text", "numeric"))
names(IPM) <- c("dpto_nombre", "dpto_ccdgo", "IPM")
M4
data <- fread('Data/Saber 11 2022-2.TXT', sep = ';')
data <- data[ESTU_NACIONALIDAD == 'COLOMBIA' &
ESTU_PAIS_RESIDE == 'COLOMBIA' &
ESTU_ESTADOINVESTIGACION == 'PUBLICAR' &
COLE_DEPTO_UBICACION != 'SAN ANDRES' &
!is.na(COLE_MCPIO_UBICACION) &
!is.na(COLE_DEPTO_UBICACION) &
!is.na(PUNT_GLOBAL) &
!is.na(COLE_COD_DEPTO_UBICACION)]
# Ordenar y agrupar
setorder(data, COLE_COD_MCPIO_UBICACION)
data[, group := .GRP, by = COLE_COD_DEPTO_UBICACION]
data[, groupM := .GRP, by = COLE_COD_MCPIO_UBICACION]
# CANTIDAD DE ESTUDIANTES:
nk <- data[, .N, by = group]$N                      # Por departamento
njk <- data[, .N, by = groupM]$N                    # Por municipio
N = nrow(data)                                      # Totales
r <- length(unique(data$COLE_COD_DEPTO_UBICACION))  # Número de departamentos
rn <- (unique(data$COLE_DEPTO_UBICACION))      # Nombre de departamentos
n = length(unique(data$COLE_COD_MCPIO_UBICACION))   # Número de municipios
group = data$group                                  # Grupos por municipios
groupM = data$groupM                                # Grupos por departamentos
groupMxD = c()                                      # Grupos de municipios por departamento
MxD = c()                                           # Municipios por departamento
for (i in unique(group)){
groupMxD = c(groupMxD,rep(i,length(unique(groupM[group == i]))))
MxD = c(MxD, length(unique(groupM[group == i])))
}
y = data$PUNT_GLOBAL
M4 = fread('Data/GibbsModelo4.txt') # Importe de Resultados del modelo 4
IPM <- read_excel("Data/IPM.xlsx", col_types = c("text", "text", "numeric"))
names(IPM) <- c("dpto_nombre", "dpto_ccdgo", "IPM")
IPM
Col <- grep("^theta\\d+$", names(M4), value = TRUE)
Thetas <-  M4[, ..Col]
Thetas
names(M4)
names(M4[,1112:1181])
PMreg = t(M4[, ..Col])
PMreg
PMreg[,1:10]
rn
rownames(IPMreg) = rn
IPMreg = t(M4[, ..Col])
rownames(IPMreg) = rn
rn
PMreg[,1:10]
IPMreg[,1:10]
rc <- (unique(data$COLE_COD_DEPTO_UBICACION))      # Codigo de departamentos)
rc
rc  <- ifelse(nchar(rc ) == 1, paste0("0", rc ), rc )
rc
IPM
length(col)
length(Col)
IPMreg
IPMreg[,1]
IPMreg[,1:2]
IPM
IPM <- as.data.table(IPM)
IPM
IPM <- IPM[dpto_ccdgo == rc]
IPM <- IPM[dpto_ccdgo %in% rc]
IPM
IPMreg[,1:2]
IPM <- IPM[order(dpto_ccdgo)]
IPM
IPMreg = cbind('IPM' = IPM$IPM, IPMreg)
IPMreg[,1:2]
IPMpred = IPMreg[is.na(IPMreg[,'IPM']),]
IPMreg = IPMreg[!is.na(IPMreg[,'IPM']),]
IPMpredicciones = matrix(NA, ncol = nrow(IPMpred), nrow = nrow(M4))
IPMpredicciones
colnames(IPMpredicciones) = rownames(IPMpred)
IPMpredicciones
Progress = txtProgressBar(min = 2, max = nrow(M5)+1, style = 3)
Progress = txtProgressBar(min = 2, max = nrow(M4)+1, style = 3)
for (i in 2:(nrow(M5) + 1)){
coeficientes = lm(IPMreg[,'IPM'] ~ IPMreg[,i])$coefficients
IPMpredicciones[i-1,] = coeficientes[1] + coeficientes[2] * IPMpred[,i]
setTxtProgressBar(Progress,i)
}
for (i in 2:(nrow(M4) + 1)){
coeficientes = lm(IPMreg[,'IPM'] ~ IPMreg[,i])$coefficients
IPMpredicciones[i-1,] = coeficientes[1] + coeficientes[2] * IPMpred[,i]
setTxtProgressBar(Progress,i)
}
close(Progress)
colnames(IPMpredicciones)
colMeans(IPMpredicciones)
ResultadosIPM = cbind('Departamento' = colnames(IPMpredicciones)
'Media posterior' = colMeans(IPMpredicciones),
ResultadosIPM = cbind('Departamento' = colnames(IPMpredicciones),
'Media posterior' = colMeans(IPMpredicciones),
'2.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.025),
'97.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.975))
ResultadosIPM
ResultadosIPM = cbind('Media posterior' = colMeans(IPMpredicciones),
'2.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.025),
'97.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.975))
ResultadosIPM
ResultadosIPM = cbind('Media Post' = colMeans(IPMpredicciones),
'2.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.025),
'97.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.975))
ResultadosIPM
IPM
IPMreg[,1]
IPMreg[,'IPM']
IPMpredicciones = matrix(NA, ncol = nrow(IPMpred), nrow = nrow(M4))
for (i in 2:(nrow(M4) + 1)){
coeficientes = lm(IPMreg[i,'IPM'] ~ IPMreg[,i])$coefficients
IPMpredicciones[i-1,] = coeficientes[1] + coeficientes[2] * IPMpred[,i]
setTxtProgressBar(Progress,i)
}
IPMpredicciones = matrix(NA, ncol = nrow(IPMpred), nrow = nrow(M4))
for (i in 2:(nrow(M4) + 1)){
coeficientes = lm(IPMreg[,'IPM'] ~ IPMreg[,i])$coefficients
IPMpredicciones[i-1,] = coeficientes[1] + coeficientes[2] * IPMpred[,i]
setTxtProgressBar(Progress,i)
}
close(Progress)
ResultadosIPM = cbind('Media Post' = colMeans(IPMpredicciones),
'2.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.025),
'97.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.975))
ResultadosIPM
IPMpredicciones = matrix(NA, ncol = nrow(IPMpred), nrow = nrow(M4))
colnames(IPMpredicciones) = rownames(IPMpred)
Progress = txtProgressBar(min = 2, max = nrow(M4) + 1, style = 3)
for (i in 2:(nrow(M4) + 1)){
coeficientes = lm(IPMreg[,'IPM'] ~ IPMreg[,i])$coefficients
IPMpredicciones[i-1,] = coeficientes[1] + coeficientes[2] * IPMpred[,i]
setTxtProgressBar(Progress,i)
}
close(Progress)
ResultadosIPM = cbind('Media Post' = colMeans(IPMpredicciones),
'2.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.025),
'97.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.975))
ResultadosIPM
IPM
IPMreg
IPMreg
IPMreg
IPMreg[1:24]
IPMreg = t(M4[, ..Col])
rownames(IPMreg) = rn
IPMreg = cbind('IPM' = IPM$IPM, IPMreg)
IPMreg
# ====> ESTADISTICA BASEYIANA: CASO DE ESTUDIO #2
setwd("~/REPOS GIT/Estadistica_Bayesiana/Caso2")
# Cargar librerias
library(data.table)                            # Manejo de archivos grandes de datos más eficiente
library(metRology)                             # Distribución t escalada
library(progress)                              # Barras de progreso
library(cluster)                               # K-means
library(factoextra)                            # Visualización de K-means
library(sf)                                    # Manipulación de datos geoespaciales
library(dplyr)                                 # Manipulación de datos
library(readxl)
# =====> PUNTO 13: Calcular la media posterior y un intervalo de credibilidad al 95%
#               de la incicendencia monetaria de los departamentos, para todos los departamentos
#               que no fueron medidos por el DANE, por medio de una regresion lineal simple de la IPM
#               frente a las medias especificas de los departamentos de M4.
#               Presentar los resultados tabularmente y visualmente a través de un mapa
data <- fread('Data/Saber 11 2022-2.TXT', sep = ';')
data <- data[ESTU_NACIONALIDAD == 'COLOMBIA' &
ESTU_PAIS_RESIDE == 'COLOMBIA' &
ESTU_ESTADOINVESTIGACION == 'PUBLICAR' &
COLE_DEPTO_UBICACION != 'SAN ANDRES' &
!is.na(COLE_MCPIO_UBICACION) &
!is.na(COLE_DEPTO_UBICACION) &
!is.na(PUNT_GLOBAL) &
!is.na(COLE_COD_DEPTO_UBICACION)]
# Ordenar y agrupar
setorder(data, COLE_COD_MCPIO_UBICACION)
data[, group := .GRP, by = COLE_COD_DEPTO_UBICACION]
data[, groupM := .GRP, by = COLE_COD_MCPIO_UBICACION]
# CANTIDAD DE ESTUDIANTES:
nk <- data[, .N, by = group]$N                      # Por departamento
njk <- data[, .N, by = groupM]$N                    # Por municipio
N = nrow(data)                                      # Totales
r <- length(unique(data$COLE_COD_DEPTO_UBICACION))  # Número de departamentos
rn <- (unique(data$COLE_DEPTO_UBICACION))      # Nombre de departamentos
rc <- (unique(data$COLE_COD_DEPTO_UBICACION))      # Codigo de departamentos)
rc  <- ifelse(nchar(rc ) == 1, paste0("0", rc ), rc )
n = length(unique(data$COLE_COD_MCPIO_UBICACION))   # Número de municipios
group = data$group                                  # Grupos por municipios
groupM = data$groupM                                # Grupos por departamentos
groupMxD = c()                                      # Grupos de municipios por departamento
MxD = c()                                           # Municipios por departamento
for (i in unique(group)){
groupMxD = c(groupMxD,rep(i,length(unique(groupM[group == i]))))
MxD = c(MxD, length(unique(groupM[group == i])))
}
y = data$PUNT_GLOBAL
M4 = fread('Data/GibbsModelo4.txt') # Importe de Resultados del modelo 4
IPM <- read_excel("Data/IPM.xlsx", col_types = c("text", "text", "numeric"))
names(IPM) <- c("dpto_nombre", "dpto_ccdgo", "IPM")
IPM <- as.data.table(IPM)
IPM <- IPM[dpto_ccdgo %in% rc]
IPM <- IPM[order(dpto_ccdgo)]  # Ordenar por el dpto_ccdgo
# Extraccion de los Thetas del M4
Col <- grep("^theta\\d+$", names(M4), value = TRUE)
##################################################################
IPMreg = t(M4[, ..Col])
rownames(IPMreg) = rn
IPMreg = cbind('IPM' = IPM$IPM, IPMreg)
IPMpred = IPMreg[is.na(IPMreg[,'IPM']),]
IPMreg = IPMreg[!is.na(IPMreg[,'IPM']),]
IPMpredicciones = matrix(NA, ncol = nrow(IPMpred), nrow = nrow(M4))
colnames(IPMpredicciones) = rownames(IPMpred)
Progress = txtProgressBar(min = 2, max = nrow(M4) + 1, style = 3)
for (i in 2:(nrow(M4) + 1)){
coeficientes = lm(IPMreg[,'IPM'] ~ IPMreg[,i])$coefficients
IPMpredicciones[i-1,] = coeficientes[1] + coeficientes[2] * IPMpred[,i]
setTxtProgressBar(Progress,i)
}
close(Progress)
ResultadosIPM = cbind('Media Post' = colMeans(IPMpredicciones),
'2.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.025),
'97.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.975))
ResultadosIPM
IPMreg
IPMpred
# ====> ESTADISTICA BASEYIANA: CASO DE ESTUDIO #2
setwd("~/REPOS GIT/Estadistica_Bayesiana/Caso2")
# Cargar librerias
library(data.table)                            # Manejo de archivos grandes de datos más eficiente
library(metRology)                             # Distribución t escalada
library(progress)                              # Barras de progreso
library(cluster)                               # K-means
library(factoextra)                            # Visualización de K-means
library(sf)                                    # Manipulación de datos geoespaciales
library(dplyr)                                 # Manipulación de datos
library(readxl)
# =====> PUNTO 13: Calcular la media posterior y un intervalo de credibilidad al 95%
#               de la incicendencia monetaria de los departamentos, para todos los departamentos
#               que no fueron medidos por el DANE, por medio de una regresion lineal simple de la IPM
#               frente a las medias especificas de los departamentos de M4.
#               Presentar los resultados tabularmente y visualmente a través de un mapa
data <- fread('Data/Saber 11 2022-2.TXT', sep = ';')
data <- data[ESTU_NACIONALIDAD == 'COLOMBIA' &
ESTU_PAIS_RESIDE == 'COLOMBIA' &
ESTU_ESTADOINVESTIGACION == 'PUBLICAR' &
COLE_DEPTO_UBICACION != 'SAN ANDRES' &
!is.na(COLE_MCPIO_UBICACION) &
!is.na(COLE_DEPTO_UBICACION) &
!is.na(PUNT_GLOBAL) &
!is.na(COLE_COD_DEPTO_UBICACION)]
# Ordenar y agrupar
setorder(data, COLE_COD_MCPIO_UBICACION)
data[, group := .GRP, by = COLE_COD_DEPTO_UBICACION]
data[, groupM := .GRP, by = COLE_COD_MCPIO_UBICACION]
# CANTIDAD DE ESTUDIANTES:
nk <- data[, .N, by = group]$N                      # Por departamento
njk <- data[, .N, by = groupM]$N                    # Por municipio
N = nrow(data)                                      # Totales
r <- length(unique(data$COLE_COD_DEPTO_UBICACION))  # Número de departamentos
rn <- (unique(data$COLE_DEPTO_UBICACION))      # Nombre de departamentos
rc <- (unique(data$COLE_COD_DEPTO_UBICACION))      # Codigo de departamentos)
rc  <- ifelse(nchar(rc ) == 1, paste0("0", rc ), rc )
n = length(unique(data$COLE_COD_MCPIO_UBICACION))   # Número de municipios
group = data$group                                  # Grupos por municipios
groupM = data$groupM                                # Grupos por departamentos
groupMxD = c()                                      # Grupos de municipios por departamento
MxD = c()                                           # Municipios por departamento
for (i in unique(group)){
groupMxD = c(groupMxD,rep(i,length(unique(groupM[group == i]))))
MxD = c(MxD, length(unique(groupM[group == i])))
}
y = data$PUNT_GLOBAL
M4 = fread('Data/GibbsModelo4.txt') # Importe de Resultados del modelo 4
IPM <- read_excel("Data/IPM.xlsx", col_types = c("text", "text", "numeric"))
names(IPM) <- c("dpto_nombre", "dpto_ccdgo", "IPM")
IPM <- as.data.table(IPM)
IPM <- IPM[dpto_ccdgo %in% rc]
IPM <- IPM[order(dpto_ccdgo)]  # Ordenar por el dpto_ccdgo
# Extraccion de los Thetas del M4
Col <- grep("^theta\\d+$", names(M4), value = TRUE)
##################################################################
IPMreg = t(M4[, ..Col])
rownames(IPMreg) = rn
IPMreg = cbind('IPM' = IPM$IPM, IPMreg)
IPMpred = IPMreg[is.na(IPMreg[,'IPM']),]
IPMreg = IPMreg[!is.na(IPMreg[,'IPM']),]
IPMpredicciones = matrix(NA, ncol = nrow(IPMpred), nrow = nrow(M4))
colnames(IPMpredicciones) = rownames(IPMpred)
Progress = txtProgressBar(min = 2, max = nrow(M4) + 1, style = 3)
for (i in 2:(nrow(M4) + 1)){
coeficientes = lm(IPMreg[,'IPM'] ~ IPMreg[,i])$coefficients
IPMpredicciones[i-1,] = coeficientes[1] + coeficientes[2] * IPMpred[,i]
setTxtProgressBar(Progress,i)
}
close(Progress)
ResultadosIPM = cbind('Media Post' = colMeans(IPMpredicciones),
'2.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.025),
'97.5%' = apply(IPMpredicciones, 2, quantile, probs = 0.975))
ResultadosIPM
IPMreg
