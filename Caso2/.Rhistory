theme_minimal() +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 9, face = "bold", hjust = 0.5, color = "grey50"),
text = element_text(size = 10),
legend.position = "right")
# Análisis de Componentes Principales (ACP)
ACP <- dudi.pca(dat3[1:1000,1:5], scannf = FALSE, nf = 3)
F <- as.matrix(ACP$li)
# Clustering jerárquico con método de Ward
hcl <- ward.cluster(dista = dist(F), h.clust = 1)
# Visualización del dendrograma con estética personalizada
fviz_dend(hcl, rect = TRUE, k_colors = "darkblue", show_labels = FALSE) +
geom_abline(v = 0.25, linetype = 2, col = "red") +
labs(title = "DENDROGRAMA DE AGRUPAMIENTO JERÁRQUICO PARA LOS PACIENTES",
subtitle = "SUBMUESTRA ILUSTRATIVA DE LA POBLACIÓN") +
theme_minimal() +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 9, face = "bold", hjust = 0.5, color = "grey50"),
text = element_text(size = 10),
legend.position = "right")
# Análisis de Componentes Principales (ACP)
ACP <- dudi.pca(dat3[1:1000,1:5], scannf = FALSE, nf = 3)
F <- as.matrix(ACP$li)
# Clustering jerárquico con método de Ward
hcl <- ward.cluster(dista = dist(F), h.clust = 1)
# Visualización del dendrograma con estética personalizada
fviz_dend(hcl, rect = TRUE, k_colors = "darkblue", show_labels = FALSE) +
geom_abline(v = 0.25, linetype = 2, col = "red") +
labs(title = "DENDROGRAMA DE AGRUPAMIENTO JERÁRQUICO PARA LOS PACIENTES",
subtitle = "SUBMUESTRA ILUSTRATIVA DE LA POBLACIÓN") +
theme_minimal() +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 9, face = "bold", hjust = 0.5, color = "grey50"),
text = element_text(size = 10),
legend.position = "right")
# Análisis de Componentes Principales (ACP)
ACP <- dudi.pca(dat3[1:1000,1:5], scannf = FALSE, nf = 3)
F <- as.matrix(ACP$li)
# Clustering jerárquico con método de Ward
hcl <- ward.cluster(dista = dist(F), h.clust = 1)
# Visualización del dendrograma con estética personalizada
fviz_dend(hcl, rect = TRUE, k_colors = "darkblue", show_labels = FALSE) +
geom_vline(0.25, linetype = 2, col = "red") +
labs(title = "DENDROGRAMA DE AGRUPAMIENTO JERÁRQUICO PARA LOS PACIENTES",
subtitle = "SUBMUESTRA ILUSTRATIVA DE LA POBLACIÓN") +
theme_minimal() +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 9, face = "bold", hjust = 0.5, color = "grey50"),
text = element_text(size = 10),
legend.position = "right")
# Análisis de Componentes Principales (ACP)
ACP <- dudi.pca(dat3[1:1000,1:5], scannf = FALSE, nf = 3)
F <- as.matrix(ACP$li)
# Clustering jerárquico con método de Ward
hcl <- ward.cluster(dista = dist(F), h.clust = 1)
# Visualización del dendrograma con estética personalizada
fviz_dend(hcl, rect = TRUE, k_colors = "darkblue", show_labels = FALSE) +
geom_hline(h =0.25, linetype = 2, col = "red") +
labs(title = "DENDROGRAMA DE AGRUPAMIENTO JERÁRQUICO PARA LOS PACIENTES",
subtitle = "SUBMUESTRA ILUSTRATIVA DE LA POBLACIÓN") +
theme_minimal() +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 9, face = "bold", hjust = 0.5, color = "grey50"),
text = element_text(size = 10),
legend.position = "right")
# Análisis de Componentes Principales (ACP)
ACP <- dudi.pca(dat3[1:1000,1:5], scannf = FALSE, nf = 3)
F <- as.matrix(ACP$li)
# Clustering jerárquico con método de Ward
hcl <- ward.cluster(dista = dist(F), h.clust = 1)
# Visualización del dendrograma con estética personalizada
p <- fviz_dend(hcl, rect = TRUE, k_colors = "darkblue", show_labels = FALSE)
# Agregar línea horizontal manualmente con ggplot2
p +
annotate("segment", x = -Inf, xend = Inf, y = 0.25, yend = 0.25,
linetype = "dashed", color = "red") +
labs(title = "DENDROGRAMA DE AGRUPAMIENTO JERÁRQUICO PARA LOS PACIENTES",
subtitle = "SUBMUESTRA ILUSTRATIVA DE LA POBLACIÓN") +
theme_minimal() +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 9, face = "bold", hjust = 0.5, color = "grey50"),
text = element_text(size = 10))
fc_1 <- FactoClass(dat3[1:1000,1:5], dudi.pca,  nf = 6,  nfcl = 6, k.clust = 5,
scanFC = FALSE,  n.max = 5000, n.clus = 1000,  sign = 2.0,
conso = TRUE, n.indi = 25, row.w = rep(1, nrow(data_cuant)) )
fc_1 <- FactoClass(dat3[1:1000,1:5], dudi.pca,  nf = 6,  nfcl = 6, k.clust = 5,
scanFC = FALSE,  n.max = 5000, n.clus = 1000,  sign = 2.0,
conso = TRUE, n.indi = 25, row.w = rep(1, nrow(10000)) )
fc_1 <- FactoClass(dat3[1:1000,1:5], dudi.pca,  nf = 6,  nfcl = 6, k.clust = 5,
scanFC = FALSE,  n.max = 5000, n.clus = 1000,  sign = 2.0,
conso = TRUE, n.indi = 25 )
FactoClass(dat3[1:1000,1:5], dudi.pca,  nf = 6,  nfcl = 6, k.clust = 5,
scanFC = FALSE,  n.max = 5000, n.clus = 1000,  sign = 2.0,
conso = TRUE, n.indi = 25 )
Iris = data(iris)
Iris
Iris = data(iris)
Iris = data("iris3")
Iris
Iris = as.data.frame(Iris)
data("iris3")
iris
Iris = iris
A = Iris %*% Iris
A = Iris[,1:4] %*% Iris[,1:4]
Iris[,1:4]
A = as.matrix(Iris[,1:4])
A
A%*%t(A)
B = A%*%t(A)
B
length(B)
str(B)
C = scale(B, center = TRUE, scale = TRUE)
C
View(C)
D = ifelse(C > 1, 1, ifelse(C < -1, -1, 0))
View(D)
D = matrix(0, nrow = nrow(C), ncol = ncol(C))
for(i in 1:nrow(C)){
for(j in 1:ncol(C)){
if(C[i,j] > 1){
D[i,j] = 1
}else if(C[i,j] < -1){
D[i,j] = -1
}
}
}
View(D)
for(i in 1:nrow(C)){
for(j in 1:ncol(C)){
if(C[i,j] > 1){
D[i,j] = 1
}else if(C[i,j] < -1){
D[i,j] = 1
}
}
}
heatmap(D, col = c("white", "black"), scale = "none")
heatmap(D, Rowv = NA, Colv = NA, col = cm.colors(256), scale = "none", margins = c(5,10))
corrplot(D, method = "color", type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
library(corrplot)
corrplot(D, method = "color", type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
corrplot(D,
tl.pos = "n",  # No mostrar etiquetas de texto
tl.col = "black",  # Color de las etiquetas
cl.cex = 0.8,  # Ajustar el tamaño de la leyenda
order = "original",  # Ordenar las variables según un dendrograma jerárquico
method = "color",  # Usar colores en el mapa de calor
col = colorRampPalette(c('#D14B3D','#F5A831','#1D2F57'))(200),  # Definir la paleta de colores
title = "MATRIZ DE CORRELACIÓN DE VARIABLES NUMÉRICAS",  # Título
mar = c(0,0,1,0)  # Ajustar márgenes
)
corrplot(C,
tl.pos = "n",  # No mostrar etiquetas de texto
tl.col = "black",  # Color de las etiquetas
cl.cex = 0.8,  # Ajustar el tamaño de la leyenda
order = "original",  # Ordenar las variables según un dendrograma jerárquico
method = "color",  # Usar colores en el mapa de calor
col = colorRampPalette(c('#D14B3D','#F5A831','#1D2F57'))(200),  # Definir la paleta de colores
title = "MATRIZ DE CORRELACIÓN DE VARIABLES NUMÉRICAS",  # Título
mar = c(0,0,1,0)  # Ajustar márgenes
)
C = C/max(abs(C))
corrplot(C,
tl.pos = "n",  # No mostrar etiquetas de texto
tl.col = "black",  # Color de las etiquetas
cl.cex = 0.8,  # Ajustar el tamaño de la leyenda
order = "original",  # Ordenar las variables según un dendrograma jerárquico
method = "color",  # Usar colores en el mapa de calor
col = colorRampPalette(c('#D14B3D','#F5A831','#1D2F57'))(200),  # Definir la paleta de colores
title = "MATRIZ DE CORRELACIÓN DE VARIABLES NUMÉRICAS",  # Título
mar = c(0,0,1,0)  # Ajustar márgenes
)
# Datos en formato largo
library(tidyr)
library(dplyr)
library(ggplot2)
data <- data.frame(
Tipo = rep(c("Icopor", "Biopak", "Cry-0-Vac", "Shopak"), each = 5),
Perdida = c(5.33, 4.95, 5.10, 7.14, 7.84,
6.59, 7.90, 4.48, 7.32, 6.41,
4.95, 4.44, 3.48, 3.92, 8.62,
2.41, 2.83, 2.93, 2.38, 2.11)
)
# ANOVA
modelo <- aov(Perdida ~ Tipo, data = data)
summary(modelo)
data
data %>%
group_by(Tipo) %>%
summarise(Media = mean(Perdida))
a <- data %>%
group_by(Tipo) %>%
summarise(Media = mean(Perdida))
mean(a)
a
mean(a$Media)
gl_T <- 4 - 1  # k - 1
gl_E <- 20 - 4  # N - k
F_critico <- qf(0.95, df1 = gl_T, df2 = gl_E)
F_critico
# Extraer datos de Shopak
shopak <- data %>% filter(Tipo == "Shopak") %>% pull(Perdida)
# Media y desviación estándar
media_shopak <- mean(shopak)
sd_shopak <- sd(shopak)
media_shopak
sd_shopak
# Intervalo de confianza
n <- length(shopak)
t_crit <- qt(0.975, df = n-1)  # Valor crítico t para 95% de confianza
error <- t_crit * sd_shopak / sqrt(n)
t_crit
error
IC <- c(media_shopak - error, media_shopak + error)
IC
# Cargar librerias
library(data.table)
library(metRology)
library(progress)
library(cluster)
library(factoextra)
library(sf)
library(dplyr)
library(readxl)
library(readr)
library(patchwork)
# =====> PUNTO 13: Calcular la media posterior y un intervalo de credibilidad al 95%
#               de la incicendencia monetaria de los departamentos, para todos los departamentos
#               que no fueron medidos por el DANE, por medio de una regresion lineal simple de la IPM
#               frente a las medias especificas de los departamentos de M4.
#               Presentar los resultados tabularmente y visualmente a través de un mapa
# Cargar datos
data <- fread('Data/Saber 11 2022-2.TXT', sep = ';')
# Filtrar datos
data <- data[ESTU_NACIONALIDAD == 'COLOMBIA' &
ESTU_PAIS_RESIDE == 'COLOMBIA' &
ESTU_ESTADOINVESTIGACION == 'PUBLICAR' &
COLE_DEPTO_UBICACION != 'SAN ANDRES' &
!is.na(COLE_MCPIO_UBICACION) &
!is.na(COLE_DEPTO_UBICACION) &
!is.na(PUNT_GLOBAL) &
!is.na(COLE_COD_DEPTO_UBICACION)]
setwd("~/REPOS GIT/Estadistica_Bayesiana/Caso2")
# Cargar librerias
library(data.table)
library(metRology)
library(progress)
library(cluster)
library(factoextra)
library(sf)
library(dplyr)
library(readxl)
library(readr)
library(patchwork)
# =====> PUNTO 13: Calcular la media posterior y un intervalo de credibilidad al 95%
#               de la incicendencia monetaria de los departamentos, para todos los departamentos
#               que no fueron medidos por el DANE, por medio de una regresion lineal simple de la IPM
#               frente a las medias especificas de los departamentos de M4.
#               Presentar los resultados tabularmente y visualmente a través de un mapa
# Cargar datos
data <- fread('Data/Saber 11 2022-2.TXT', sep = ';')
# Filtrar datos
data <- data[ESTU_NACIONALIDAD == 'COLOMBIA' &
ESTU_PAIS_RESIDE == 'COLOMBIA' &
ESTU_ESTADOINVESTIGACION == 'PUBLICAR' &
COLE_DEPTO_UBICACION != 'SAN ANDRES' &
!is.na(COLE_MCPIO_UBICACION) &
!is.na(COLE_DEPTO_UBICACION) &
!is.na(PUNT_GLOBAL) &
!is.na(COLE_COD_DEPTO_UBICACION)]
# Ordenar y agrupar
setorder(data, COLE_COD_MCPIO_UBICACION)
data[, group := .GRP, by = COLE_COD_DEPTO_UBICACION]
data[, groupM := .GRP, by = COLE_COD_MCPIO_UBICACION]
# CANTIDAD DE ESTUDIANTES:
nk <- data[, .N, by = group]$N                      # Por departamento
njk <- data[, .N, by = groupM]$N                    # Por municipio
N = nrow(data)                                      # Totales
r <- length(unique(data$COLE_COD_DEPTO_UBICACION))  # Número de departamentos
rn <- unique(data$COLE_DEPTO_UBICACION)             # Nombre de departamentos
rc <- unique(data$COLE_COD_DEPTO_UBICACION)         # Codigo de departamentos
rc  <- ifelse(nchar(rc) == 1, paste0("0", rc), rc)
n1 = length(unique(data$COLE_COD_MCPIO_UBICACION))   # Número de municipios
n2 = unique(data[, .(COLE_MCPIO_UBICACION, COLE_COD_MCPIO_UBICACION)]) # Número de municipios
n2[, COLE_COD_MCPIO_UBICACION := ifelse(nchar(COLE_COD_MCPIO_UBICACION) == 4, paste0("0", COLE_COD_MCPIO_UBICACION), COLE_COD_MCPIO_UBICACION)]
group = data$group                                  # Grupos por municipios
groupM = data$groupM                                # Grupos por departamentos
# Calcular grupos de municipios por departamento
groupMxD <- data[, .(groupM = unique(groupM)), by = group]$groupM
MxD <- data[, .N, by = .(group, groupM)]$N
y = data$PUNT_GLOBAL
# Importar resultados del modelo 4
M4 = fread('Data/GibbsModelo4.txt')
# Cargar datos MEN
MEN <- fread("Data/MEN.csv")
MEN <- MEN[AÑO == 2022]
# Asegurar que el código del municipio sea de 5 dígitos
MEN[, CÓDIGO_MUNICIPIO := ifelse(nchar(CÓDIGO_MUNICIPIO) == 4, paste0("0", CÓDIGO_MUNICIPIO), CÓDIGO_MUNICIPIO)]
# Filtrar y seleccionar columnas necesarias
MEN <- MEN[CÓDIGO_MUNICIPIO %in% n2$COLE_COD_MCPIO_UBICACION, .(CÓDIGO_MUNICIPIO, MUNICIPIO, DEPARTAMENTO, COBERTURA_NETA_SECUNDARIA)]
# Añadir filas faltantes
NAM <- c("27086", "94663")
NAMES <- n2[COLE_COD_MCPIO_UBICACION %in% NAM, COLE_MCPIO_UBICACION]
Rows <- data.table(CÓDIGO_MUNICIPIO = NAM, MUNICIPIO = NAMES, DEPARTAMENTO = c("Chocó", "Guainía"), COBERTURA_NETA_SECUNDARIA = NA)
MEN <- rbindlist(list(MEN, Rows))
# Ordenar MEN
setorder(MEN, CÓDIGO_MUNICIPIO)
# Seleccionar columnas relevantes de M4
Col <- grep("^eps\\d+$", names(M4), value = TRUE)
MENreg <- cbind(n2$COLE_COD_MCPIO_UBICACION, t(M4[, ..Col]))
setnames(MENreg, "V1", "CÓDIGO_MUNICIPIO")
setwd("~/REPOS GIT/Estadistica_Bayesiana/Caso2")
# Cargar librerias
library(data.table)                            # Manejo de archivos grandes de datos más eficiente
library(metRology)                             # Distribución t escalada
library(progress)                              # Barras de progreso
library(cluster)                               # K-means
library(factoextra)                            # Visualización de K-means
library(sf)                                    # Manipulación de datos geoespaciales
library(dplyr)                                 # Manipulación de datos
library(readxl)
library(readr)
library(patchwork)
# =====> PUNTO 13: Calcular la media posterior y un intervalo de credibilidad al 95%
#               de la incicendencia monetaria de los departamentos, para todos los departamentos
#               que no fueron medidos por el DANE, por medio de una regresion lineal simple de la IPM
#               frente a las medias especificas de los departamentos de M4.
#               Presentar los resultados tabularmente y visualmente a través de un mapa
data <- fread('Data/Saber 11 2022-2.TXT', sep = ';')
data <- data[ESTU_NACIONALIDAD == 'COLOMBIA' &
ESTU_PAIS_RESIDE == 'COLOMBIA' &
ESTU_ESTADOINVESTIGACION == 'PUBLICAR' &
COLE_DEPTO_UBICACION != 'SAN ANDRES' &
!is.na(COLE_MCPIO_UBICACION) &
!is.na(COLE_DEPTO_UBICACION) &
!is.na(PUNT_GLOBAL) &
!is.na(COLE_COD_DEPTO_UBICACION)]
# Ordenar y agrupar
setorder(data, COLE_COD_MCPIO_UBICACION)
data[, group := .GRP, by = COLE_COD_DEPTO_UBICACION]
data[, groupM := .GRP, by = COLE_COD_MCPIO_UBICACION]
# CANTIDAD DE ESTUDIANTES:
nk <- data[, .N, by = group]$N                      # Por departamento
njk <- data[, .N, by = groupM]$N                    # Por municipio
N = nrow(data)                                      # Totales
r <- length(unique(data$COLE_COD_DEPTO_UBICACION))  # Número de departamentos
rn <- (unique(data$COLE_DEPTO_UBICACION))      # Nombre de departamentos
rc <- (unique(data$COLE_COD_DEPTO_UBICACION))      # Codigo de departamentos)
rc  <- ifelse(nchar(rc ) == 1, paste0("0", rc ), rc )
n1 = length(unique(data$COLE_COD_MCPIO_UBICACION))   # Número de municipios
n2 = unique(cbind(data$COLE_MCPIO_UBICACION, data$COLE_COD_MCPIO_UBICACION))       # Número de municipios
n2[,2] <- ifelse(nchar(n2[,2]) == 4, paste0("0", n2[,2]), n2[,2])
group = data$group                                  # Grupos por municipios
groupM = data$groupM                                # Grupos por departamentos
groupMxD = c()                                      # Grupos de municipios por departamento
MxD = c()                                           # Municipios por departamento
for (i in unique(group)){
groupMxD = c(groupMxD,rep(i,length(unique(groupM[group == i]))))
MxD = c(MxD, length(unique(groupM[group == i])))
}
y = data$PUNT_GLOBAL
M4 = fread('Data/GibbsModelo4.txt') # Importe de Resultados del modelo 4
MEN <- read_csv("Data/MEN.csv")
MEN <- MEN %>%
filter(AÑO == 2022)
MEN$CÓDIGO_MUNICIPIO <- as.character(MEN$CÓDIGO_MUNICIPIO)
MEN$CÓDIGO_MUNICIPIO <- ifelse(nchar(MEN$CÓDIGO_MUNICIPIO) == 4,
paste0("0", MEN$CÓDIGO_MUNICIPIO),
MEN$CÓDIGO_MUNICIPIO)
MEN <- as.data.table(MEN)
MEN <- MEN[CÓDIGO_MUNICIPIO %in% n2[,2]]
MEN <- MEN[, c('CÓDIGO_MUNICIPIO', 'MUNICIPIO', 'DEPARTAMENTO', 'COBERTURA_NETA_SECUNDARIA')]
MEN <- MEN[CÓDIGO_MUNICIPIO %in% n2[,2]]
NAM <- c("27086", "94663")
NAMES <- n2[n2[,2] %in% NAM,1]
MEN$MUNICIPIO <- toupper(MEN$MUNICIPIO)
Rows <- cbind(NAM[1:2], NAMES[1:2], c("Chocó", "Guainía"), NA)
colnames(Rows) <- colnames(MEN)
MEN <- rbind(MEN, Rows)
MEN <- MEN[order(CÓDIGO_MUNICIPIO)]
Col <- grep("^eps\\d+$", names(M4), value = TRUE)
MENreg = cbind(n2[,2], t(M4[, ..Col]))
rownames(MENreg) = n2[,2]
MENreg = cbind('COBERTURA_NETA_SECUNDARIA' = MEN$COBERTURA_NETA_SECUNDARIA, MENreg)
MENpred = MENreg[is.na(MENreg[,'COBERTURA_NETA_SECUNDARIA']),]
MENreg = MENreg[!is.na(MENreg[,'COBERTURA_NETA_SECUNDARIA']),]
# Asegúrate de que todas las columnas sean numéricas
MENreg <- lapply(MENreg, as.numeric)
MENpred <- lapply(MENpred, as.numeric)
# Inicializar la matriz de predicciones
MENpredicciones = matrix(NA, ncol = nrow(MENpred), nrow = nrow(M4))
nrow(MENpred)
nrow = nrow(M4)
nrow(M4)
MENpred = MENreg[is.na(MENreg[,'COBERTURA_NETA_SECUNDARIA']),]
MENreg = cbind('COBERTURA_NETA_SECUNDARIA' = MEN$COBERTURA_NETA_SECUNDARIA, MENreg)
MEN <- as.data.table(MEN)
MEN <- MEN[CÓDIGO_MUNICIPIO %in% n2[,2]]
MEN <- MEN[, c('CÓDIGO_MUNICIPIO', 'MUNICIPIO', 'DEPARTAMENTO', 'COBERTURA_NETA_SECUNDARIA')]
MEN <- MEN[CÓDIGO_MUNICIPIO %in% n2[,2]]
NAM <- c("27086", "94663")
NAMES <- n2[n2[,2] %in% NAM,1]
MEN$MUNICIPIO <- toupper(MEN$MUNICIPIO)
Rows <- cbind(NAM[1:2], NAMES[1:2], c("Chocó", "Guainía"), NA)
colnames(Rows) <- colnames(MEN)
MEN <- rbind(MEN, Rows)
MEN <- MEN[order(CÓDIGO_MUNICIPIO)]
Col <- grep("^eps\\d+$", names(M4), value = TRUE)
MENreg = cbind(n2[,2], t(M4[, ..Col]))
rownames(MENreg) = n2[,2]
MENreg = cbind('COBERTURA_NETA_SECUNDARIA' = MEN$COBERTURA_NETA_SECUNDARIA, MENreg)
gc()
library(data.table)                            # Manejo de archivos grandes de datos más eficiente
library(metRology)                             # Distribución t escalada
library(progress)                              # Barras de progreso
library(cluster)                               # K-means
library(factoextra)                            # Visualización de K-means
library(sf)                                    # Manipulación de datos geoespaciales
library(dplyr)                                 # Manipulación de datos
library(readxl)
library(readr)
library(patchwork)
data <- fread('Data/Saber 11 2022-2.TXT', sep = ';')
data <- data[ESTU_NACIONALIDAD == 'COLOMBIA' &
ESTU_PAIS_RESIDE == 'COLOMBIA' &
ESTU_ESTADOINVESTIGACION == 'PUBLICAR' &
COLE_DEPTO_UBICACION != 'SAN ANDRES' &
!is.na(COLE_MCPIO_UBICACION) &
!is.na(COLE_DEPTO_UBICACION) &
!is.na(PUNT_GLOBAL) &
!is.na(COLE_COD_DEPTO_UBICACION)]
# Ordenar y agrupar
setorder(data, COLE_COD_MCPIO_UBICACION)
data[, group := .GRP, by = COLE_COD_DEPTO_UBICACION]
data[, groupM := .GRP, by = COLE_COD_MCPIO_UBICACION]
# CANTIDAD DE ESTUDIANTES:
nk <- data[, .N, by = group]$N                      # Por departamento
njk <- data[, .N, by = groupM]$N                    # Por municipio
N = nrow(data)                                      # Totales
r <- length(unique(data$COLE_COD_DEPTO_UBICACION))  # Número de departamentos
rn <- (unique(data$COLE_DEPTO_UBICACION))      # Nombre de departamentos
rc <- (unique(data$COLE_COD_DEPTO_UBICACION))      # Codigo de departamentos)
rc  <- ifelse(nchar(rc ) == 1, paste0("0", rc ), rc )
n1 = length(unique(data$COLE_COD_MCPIO_UBICACION))   # Número de municipios
n2 = unique(cbind(data$COLE_MCPIO_UBICACION, data$COLE_COD_MCPIO_UBICACION))       # Número de municipios
n2[,2] <- ifelse(nchar(n2[,2]) == 4, paste0("0", n2[,2]), n2[,2])
group = data$group                                  # Grupos por municipios
groupM = data$groupM                                # Grupos por departamentos
groupMxD = c()                                      # Grupos de municipios por departamento
MxD = c()                                           # Municipios por departamento
for (i in unique(group)){
groupMxD = c(groupMxD,rep(i,length(unique(groupM[group == i]))))
MxD = c(MxD, length(unique(groupM[group == i])))
}
y = data$PUNT_GLOBAL
M4 = fread('Data/GibbsModelo4.txt') # Importe de Resultados del modelo 4
gc()
MEN <- read_csv("Data/MEN.csv")
MEN <- MEN %>%
filter(AÑO == 2022)
MEN$CÓDIGO_MUNICIPIO <- as.character(MEN$CÓDIGO_MUNICIPIO)
MEN$CÓDIGO_MUNICIPIO <- ifelse(nchar(MEN$CÓDIGO_MUNICIPIO) == 4,
paste0("0", MEN$CÓDIGO_MUNICIPIO),
MEN$CÓDIGO_MUNICIPIO)
MEN <- as.data.table(MEN)
MEN <- MEN[CÓDIGO_MUNICIPIO %in% n2[,2]]
MEN <- MEN[, c('CÓDIGO_MUNICIPIO', 'MUNICIPIO', 'DEPARTAMENTO', 'COBERTURA_NETA_SECUNDARIA')]
MEN <- MEN[CÓDIGO_MUNICIPIO %in% n2[,2]]
NAM <- c("27086", "94663")
NAMES <- n2[n2[,2] %in% NAM,1]
MEN$MUNICIPIO <- toupper(MEN$MUNICIPIO)
Rows <- cbind(NAM[1:2], NAMES[1:2], c("Chocó", "Guainía"), NA)
colnames(Rows) <- colnames(MEN)
MEN <- rbind(MEN, Rows)
MEN <- MEN[order(CÓDIGO_MUNICIPIO)]
Col <- grep("^eps\\d+$", names(M4), value = TRUE)
MENreg = cbind(n2[,2], t(M4[, ..Col]))
rownames(MENreg) = n2[,2]
MENreg = cbind('COBERTURA_NETA_SECUNDARIA' = MEN$COBERTURA_NETA_SECUNDARIA, MENreg)
MENpred = MENreg[is.na(MENreg[,'COBERTURA_NETA_SECUNDARIA']),]
MENreg = MENreg[!is.na(MENreg[,'COBERTURA_NETA_SECUNDARIA']),]
# Asegúrate de que todas las columnas sean numéricas
MENreg <- lapply(MENreg, as.numeric)
MENpred <- lapply(MENpred, as.numeric)
gc()
# Inicializar la matriz de predicciones
MENpredicciones = matrix(NA, ncol = nrow(MENpred), nrow = nrow(M4))
colnames(MENpredicciones) = rownames(MENpred)
nrow(MENpred)
MENpred
nrow(M4)
MENpred = MENreg[is.na(MENreg[,'COBERTURA_NETA_SECUNDARIA']),]
MENreg = MENreg[!is.na(MENreg[,'COBERTURA_NETA_SECUNDARIA']),]
MENreg = cbind('COBERTURA_NETA_SECUNDARIA' = MEN$COBERTURA_NETA_SECUNDARIA, MENreg)
MENreg = cbind(n2[,2], t(M4[, ..Col]))
rownames(MENreg) = n2[,2]
MENreg = cbind('COBERTURA_NETA_SECUNDARIA' = MEN$COBERTURA_NETA_SECUNDARIA, MENreg)
MENpred = MENreg[is.na(MENreg[,'COBERTURA_NETA_SECUNDARIA']),]
MENreg = MENreg[!is.na(MENreg[,'COBERTURA_NETA_SECUNDARIA']),]
# Inicializar la matriz de predicciones
MENpredicciones = matrix(NA, ncol = nrow(MENpred), nrow = nrow(M4))
colnames(MENpredicciones) = rownames(MENpred)
# Barra de progreso
Progress = txtProgressBar(min = 2, max = nrow(M4) + 1, style = 3)
# Bucle de regresión
for (i in 2:(nrow(M4) + 1)){
coeficientes = lm(MENreg[,'COBERTURA_NETA_SECUNDARIA'] ~ MENreg[,i])$coefficients
MENpredicciones[i-1,] = coeficientes[1] + coeficientes[2] * MENpred[,i]
setTxtProgressBar(Progress,i)
}
